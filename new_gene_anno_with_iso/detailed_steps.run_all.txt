ml lang/Python/2.7.16-GCCcore-8.3.0 bio/Biopython/1.75-foss-2019a





########################################### dealing with iso-seq data
###########################################
###########################################

####################align iso-seq flnc reads (cluseterd hq fasta) to the reference genome
#######build index
ml bio/minimap2/2.24-GCCcore-11.2.0
minimap2 -d  Rn_01.asm.bp.hap1.p_ctg.mmi Rn_01.asm.bp.hap1.p_ctg.fasta

#######alignment
#######refer to https://github.com/lh3/minimap2/blob/master/cookbook.md#map-iso-seq

#!/bin/bash
#iso_alignment

#SBATCH --export=ALL               # Start with a clean environment
#SBATCH -A m2_jgu-EvolTroph
#SBATCH --nodes=1                   # the number of nodes you want to reserve
#SBATCH --partition parallel
#SBATCH --job-name=iso_alignment
#SBATCH --output=./iso_alignment.out
#SBATCH --error=./iso_alignment.err
#SBATCH --time=02:00:00
#SBATCH --cpus-per-task=16
#SBATCH --mem=16G

ml bio/minimap2/2.24-GCCcore-11.2.0 #mogon
minimap2 -ax splice -uf -t 16 -C5 /lustre/miifs01/project/m2_jgu-evoltroph/ywang/03.annotation_insect/ref/Rn_01.asm.bp.hap1.p_ctg.mmi /lustre/miifs01/project/m2_jgu-evolpest/xus/rawdata/Aphids/Iso-seq/X204SC23031246-Z01-F001_01/raw_data/R_Rn_0228/Rn_0228.clustered.hq.fasta > Rn_0228.iso_seq.sam

####sort and index
ml bio/SAMtools/1.14-GCC-11.2.0
samtools sort -@ 4 Rn_0228.iso_seq.sam -O BAM -o Rn_0228.iso_seq.sort.bam


########################################### dealing with RNA-seq short reads data
###########################################
###########################################

#! /bin/bash
#fqc.sbatch

#SBATCH --export=ALL               # Start with a clean environment
#SBATCH -A m2_jgu-EvolTroph
#SBATCH --nodes=1                   # the number of nodes you want to reserve
#SBATCH --cpus-per-task=8        # the number of CPU cores per node
#SBATCH --mem=16G                 # how much memory is needed per node (units can be: K, M, G, T)
#SBATCH --partition parallel          # on which partition to submit the job
#SBATCH --time=02:20:00             # the max wallclock time (time limit your job will run)
#SBATCH --job-name=fqc       # the name of your job
#SBATCH -o ./fqc.out # Standard output
#SBATCH -e ./fqc.err # Standard error

raw_reads_dir="/lustre/project/m2_jgu-evoltroph/ywang/03.annotation_insect/RNA-seq"
clean_reads_dir="/lustre/project/m2_jgu-evoltroph/ywang/03.annotation_insect/RNA-seq/clean_Reads"

#########fq on raw data
module load bio/FastQC/0.11.9-Java-11
fastqc -t 8 $raw_reads_dir/R_Rn_01_EKRN230012279-1A_HWV7HDSX5_L3_1.fq.gz 
fastqc -t 8 $raw_reads_dir/R_Rn_01_EKRN230012279-1A_HWV7HDSX5_L3_2.fq.gz

#########data filtration
module load lang/Java/17.0.1

java -Xmx4G -jar /gpfs/fs1/home/ywang/software/trimmomatic/Trimmomatic-0.39/trimmomatic-0.39.jar PE -threads 8 $raw_reads_dir/R_Rn_01_EKRN230012279-1A_HWV7HDSX5_L3_1.fq.gz $raw_reads_dir/R_Rn_01_EKRN230012279-1A_HWV7HDSX5_L3_2.fq.gz -baseout $clean_reads_dir/Rn_RNA-seq.clean ILLUMINACLIP:/gpfs/fs1/home/ywang/software/trimmomatic/Trimmomatic-0.39/adapters/TruSeq3-PE-2.fa:2:30:10 SLIDINGWINDOW:4:15 MINLEN:36 HEADCROP:10


#########fq on filtered data
module load bio/FastQC/0.11.9-Java-11
cd $clean_reads_dir;
fastqc -t 8 $clean_reads_dir/Rn_RNA-seq.clean_1P
fastqc -t 8 $clean_reads_dir/Rn_RNA-seq.clean_2P


#########alignment using hisat2

#! /bin/bash
#RNA-seq alignment

#SBATCH --export=ALL               # Start with a clean environment
#SBATCH -A m2_jgu-EvolTroph
#SBATCH --nodes=1                   # the number of nodes you want to reserve
#SBATCH --cpus-per-task=8        # the number of CPU cores per node
#SBATCH --mem=16G                 # how much memory is needed per node (units can be: K, M, G, T)
#SBATCH --partition parallel          # on which partition to submit the job
#SBATCH --time=02:00:00             # the max wallclock time (time limit your job will run)
#SBATCH --job-name=RNA_align       # the name of your job
#SBATCH -o ./hisat2_align.out # Standard output
#SBATCH -e ./hisat2_align.err # Standard error
ml bio/HISAT2/2.2.1-gompi-2020b

clean_reads_dir="/lustre/project/m2_jgu-evoltroph/ywang/03.annotation_insect/RNA-seq/clean_Reads"

hisat2 -p 8 -x /lustre/miifs01/project/m2_jgu-evoltroph/ywang/03.annotation_insect/ref/Rn_01.asm.bp.hap1.p_ctg.hisat2_index \
-1 $clean_reads_dir/Rn_RNA-seq.clean_1P -2 $clean_reads_dir/Rn_RNA-seq.clean_2P -S $clean_reads_dir/Rn_RNA-seq.sam

####sort and index
ml bio/SAMtools/1.14-GCC-11.2.0
samtools sort -@ 4 $clean_reads_dir/Rn_RNA-seq.sam  -O BAM -o $clean_reads_dir/Rn_RNA-seq.sort.bam


########################################### running braker2 (probably PASA and EVM as well)
###########################################
###########################################

#######refer to https://biohpc.cornell.edu/doc/genome_2020_exercise2.html
#######and https://bioinformaticsworkbook.org/dataAnalysis/GenomeAnnotation/Intro_to_Braker2.html#gsc.tab=0

#######soft mask the ref genome
#! /bin/bash
#repeat anno

#SBATCH --export=ALL               # Start with a clean environment
#SBATCH -A m2_jgu-EvolTroph
#SBATCH --nodes=1                   # the number of nodes you want to reserve
#SBATCH --cpus-per-task=24        # the number of CPU cores per node
#SBATCH --mem=8G                 # how much memory is needed per node (units can be: K, M, G, T)
#SBATCH --partition parallel          # on which partition to submit the job
#SBATCH --time=24:00:00             # the max wallclock time (time limit your job will run)
#SBATCH --job-name=repeat_anno       # the name of your job
#SBATCH -o ./repeat_anno.out # Standard output
#SBATCH -e ./repeat_anno.err # Standard error

ml bio/RepeatModeler/2.0.2a-foss-2020b


###-UPDATE YOUR INPUTS
INPUT=/lustre/project/m2_jgu-evolpest/xus/Rhopalosiphum_nymphaeae/02.annotation/Rn_01.asm.bp.hap1.p_ctg.fasta
DB="Rn_01"                                          # make up a customized name for your database

###-SETUP DETECTION OF REPEATS
echo "Build database ..."
time BuildDatabase -name $DB $INPUT

echo "Run RepeatModeler ..."
time RepeatModeler -database $DB -pa 24 -LTRStruct  > repeatModeler.out.log

ln -s RM_*/consensi.fa.classified ./

echo "Run RepeatMasker ..."
time RepeatMasker -pa 24 -gff -lib consensi.fa.classified $INPUT